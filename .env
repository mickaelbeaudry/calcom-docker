# Set this value to 'agree' to accept our license:n
# LICENSE: https://github.com/calendso/calendso/blob/main/LICENSE
#
# Summary of terms:
# - The codebase has to stay open source, whether it was modified or not
# - You can not repackage or sell the codebase
# - Acquire a commercial license to remove these terms by emailing: license@cal.com
NEXT_PUBLIC_LICENSE_CONSENT='agree'
LICENSE='agree'

# BASE_URL and NEXT_PUBLIC_APP_URL are both deprecated. Both are replaced with one variable, NEXT_PUBLIC_WEBAPP_URL
# BASE_URL='https://rendez-vous.aktioalta.com'
# NEXT_PUBLIC_APP_URL='https://rendez-vous.aktioalta.com'
NEXT_PUBLIC_WEBAPP_URL=https://rendez-vous.aktioalta.com

# Configure NEXTAUTH_URL manually if needed, otherwise it will resolve to {NEXT_PUBLIC_WEBAPP_URL}/api/auth
# NEXTAUTH_URL=http://localhost:3000/api/auth

# It is highly recommended that the NEXTAUTH_SECRET must be overridden and very unique
# Use `openssl rand -base64 32` to generate a key
NEXTAUTH_SECRET='mZAcmyuGf2kLjn2OPOhKQsoK0nLwLR8AsTSW3gRX8'

# Encryption key that will be used to encrypt CalDAV credentials, choose a random string, for example with `dd if=/dev/urandom bs=1K count=1 | md5sum`
# Application Key for symmetric encryption and decryption
# must be 32 bytes for AES256 encryption algorithm
CALENDSO_ENCRYPTION_KEY=3MPc1LVtVKobejtnSv4d5fta8EJYSfLa

# Deprecation note: JWT_SECRET is no longer used
# JWT_SECRET='1309lkjasdf098a79a8s7df0anfasnmd0sdfa98sbd0a9s807absnf'

# This is used so we can bypass emails in auth flows for E2E testing
PLAYWRIGHT_SECRET=
POSTGRES_USER=unicorn_user_123
POSTGRES_PASSWORD=magical_password_321
POSTGRES_DB=calendso_db
DATABASE_HOST=database:5432
DATABASE_URL=postgresql://unicorn_user_123:magical_password_321@database:5432/calendso_db

# DATABASE_URL='postgresql://<user>:<pass>@<db-host>:<db-port>/<db-name>'

# Needed to enable Google Calendar integrationa and Login with Google
# @see https://github.com/calendso/calendso#obtaining-the-google-api-credentials
GOOGLE_API_CREDENTIALS={"web":{"client_id":"811371507788-8t4r1dtivu0pbnnhhc6qc70use9erk3v.apps.googleusercontent.com","project_id":"composed-circle-339223","auth_uri":"https://accounts.google.com/o/oauth2/auth","token_uri":"https://oauth2.googleapis.com/token","auth_provider_x509_cert_url":"https://www.googleapis.com/oauth2/v1/certs","client_secret":"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","redirect_uris":["https://rendez-vous.dev.aktioalta.com/api/integrations/googlecalendar/callback","https://rendez-vous.aktioalta.com/api/integrations/googlecalendar/callback"]}}


# To enable Login with Google you need to:
# 1. Set `GOOGLE_API_CREDENTIALS` above
# 2. Set `GOOGLE_LOGIN_ENABLED` to `true`
GOOGLE_LOGIN_ENABLED=true



# To enable SAML login, set both these variables
# @see https://github.com/calendso/calendso/tree/main/ee#setting-up-saml-login
# SAML_DATABASE_URL="postgresql://postgres:@localhost:5450/cal-saml"
# SAML_ADMINS='pro@example.com'

# @see: https://github.com/calendso/calendso/issues/263
# Required for Vercel hosting - set NEXTAUTH_URL to equal your BASE_URL
# NEXTAUTH_URL='https://rendez-vous.aktioalta.com'

# Set this to '1' if you don't want Cal to collect anonymous usage
CALCOM_TELEMETRY_DISABLED=1


# Used for the Office 365 / Outlook.com Calendar integration
MS_GRAPH_CLIENT_ID=
MS_GRAPH_CLIENT_SECRET=

# Used for the Zoom integration
ZOOM_CLIENT_ID=
ZOOM_CLIENT_SECRET=

#Used for the Daily integration
DAILY_API_KEY=
DAILY_SCALE_PLAN=''

# E-mail settings

# Cal uses nodemailer (@see https://nodemailer.com/about/) to provide email sending. As such we are trying to
# allow access to the nodemailer transports from the .env file. E-mail templates are accessible within lib/emails/

# Configures the global From: header whilst sending emails.
EMAIL_FROM='rendez-vous-ne-pas-repondre@aktioalta.com'

# Configure SMTP settings (@see https://nodemailer.com/smtp/).
# Note: The below configuration for Office 365 has been verified to work.
EMAIL_SERVER_HOST='smtp.zoho.com'
EMAIL_SERVER_PORT=587
EMAIL_SERVER_USER='rendez-vous-ne-pas-repondre@aktioalta.com'
# Keep in mind that if you have 2FA enabled, you will need to provision an App Password.
EMAIL_SERVER_PASSWORD='DTaLZt8xmsV7'
# The following configuration for Gmail has been verified to work.
# EMAIL_SERVER_HOST='smtp.gmail.com'
# EMAIL_SERVER_PORT=465
# EMAIL_SERVER_USER='<gmail_emailAddress>'
## You will need to provision an App Password.
## @see https://support.google.com/accounts/answer/185833
# EMAIL_SERVER_PASSWORD='<gmail_app_password>'

# ApiKey for cronjobs
CRON_API_KEY='0cc0e6c35519bba620c9360cfe3e68d0'


NODE_ENV=production

# Stripe Config
NEXT_PUBLIC_STRIPE_PUBLIC_KEY= # pk_test_...
STRIPE_PRIVATE_KEY=            # sk_test_...
STRIPE_CLIENT_ID=              # ca_...
STRIPE_WEBHOOK_SECRET=         # whsec_...
PAYMENT_FEE_PERCENTAGE=0.005   # Take 0.5% commission
PAYMENT_FEE_FIXED=10           # Take 10 additional cents commission



# Intercom Config
NEXT_PUBLIC_INTERCOM_APP_ID=
NEXT_PUBLIC_DEBUG=1

